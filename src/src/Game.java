package src;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JPanel;
import javax.swing.Timer;


@SuppressWarnings("serial")
public class Game extends JPanel implements ActionListener{
	
	private final int ICRAFT_X = 50;
	private final int ICRAFT_Y = 20;
	private final int DELAY = 15;
	private Timer timer;
	private Craft craft;
	
	private Background back;
	
	private int score;
	private int life;
	private int spawned;
	
	private boolean ingame;
	private final int B_WIDTH = 480;
	private final int B_HEIGHT = 340;
		
	private ArrayList<Alien> aliens;
	private ArrayList<Wall> walls;
	private ArrayList<Life> lives;
	private ArrayList<Alien2> aliens2;
	
	public Game(){
		
		initBoard();
		
	}
	
	private void initBoard(){
		
		addKeyListener(new TAdapter());
		setFocusable(true);
		setDoubleBuffered(true);
		
		ingame = true;
		score = 0;
		life = 3;
		spawned = 0;
		
		setPreferredSize(new Dimension(B_WIDTH, B_HEIGHT));
			
		craft = new Craft(ICRAFT_X, ICRAFT_Y);
		
		back = new Background();
		
		initAliens();
		Life.setSpeed(5);
		
		walls = new ArrayList<>();
		lives = new ArrayList<>();
		aliens2 = new ArrayList<>();
		aliens2.add(new Alien2(500,20));
				
		timer = new Timer(DELAY, this);
		timer.start();
		
	}
	
	/*
	 * aliens that are visible are contained in an ArrayList
	 * they are all randomly generated by a simple system based on a random number
	 * at the beginning, 5 aliens are generated 
	 */
	public void initAliens(){
		
		aliens = new ArrayList<>();
		
		for(int i = 0; i<5; i++){
			Random rand = new Random();
			int posY = rand.nextInt(B_HEIGHT);
			int posX = rand.nextInt(B_WIDTH) + 500;
			
			if(posY < 76) posY = 20;
			else if(posY < 132) posY = 81;
			else if(posY < 188) posY = 142;
			else if(posY < 244) posY = 203;
			else posY = 264;
			
			//posY = 20;
		
			aliens.add(new Alien(posX, posY));
		}
		
		Alien.setSpeed(3);
	}
	
	
	/*
	 * this function will paint every sprite that is visible at the moment and the background
	 * it takes the coordinates of every sprite and background to paint them at the right place
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		
		g.drawImage(back.getImage(), -back.getPosX(), 0, this);
		
		if (back.getPosX() + B_WIDTH > back.getWidth()) {
            g.drawImage(back.getImage(), - back.getPosX() + back.getWidth(), 0, this);
        }
		
		Graphics2D g2d = (Graphics2D) g;
		if(craft.isVisible())
			g2d.drawImage(craft.getImage(), craft.getX(), craft.getY(), this);
		

        ArrayList<Missile> ms = craft.getMissiles();

        for (Missile m : ms) {
            if(m.isVisible())
            	g2d.drawImage(m.getImage(), m.getX(), m.getY(), this);
        }
        
        for (Alien a : aliens){
        	if(a.isVisible())
        		g.drawImage(a.getImage(), a.getX(), a.getY(), this);
        }
        
        for (Wall w : walls){
        	if(w.isVisible())
        		g2d.drawImage(w.getImage(), w.getX(), w.getY(), this);
        }
        
        for (Life l : lives){
        	if(l.isVisible())
        		g2d.drawImage(l.getImage(), l.getX(), l.getY(), this);
        }
        
        for (Alien2 a : aliens2){
        	if(a.isVisible())
        		g.drawImage(a.getImage(), a.getX(), a.getY(), this);
        }
        
        Font f = new Font("Dialog", Font.BOLD,20);
        g.setFont(f);
        g.setColor(Color.BLACK);
        g.drawString("Aliens left : " + aliens.size(), 5, 20);
        g.drawString("Life left : " + life, 5, 40);
        g.drawString("Spawned : " + spawned, 5, 60);
	}
	
	@Override
	public void actionPerformed(ActionEvent e){
		
		inGame();
		
		updateBackground();
		
		updateMissiles();
        updateCraft();
        updateAliens();
        updateWalls();
        updateLives();
        updateAliens2();
        
        updateSpeed();
        
        checkCollisions();
        
		repaint();
				
	}

	/*
	 * when the game is finished, the timer stop and the gameover screen will be generated and shown 
	 * by the Frame class
	 */
	private void inGame(){
		
		if(!ingame){
			timer.stop();
			//Sound.stop();
			back.stop();
			Frame frame = Frame.getFrame();
			frame.gameOver(score, spawned, life);
			
		}
	}

	
	private void updateBackground(){
		
		if(ingame)
			back.move();		
	}
	
	@SuppressWarnings("unchecked")
	private void updateMissiles() {

	        ArrayList<Missile> ms = craft.getMissiles();

	        for (int i = 0; i < ms.size(); i++) {

	            Missile m = ms.get(i);

	            if (m.isVisible()) {
	                m.move();
	            } else {
	                ms.remove(i);
	            }
	        }
	    }
		
	private void updateCraft() {
		
		if(life < 0){
			craft.vis = false;
			ingame = false;
		}
		
		if(craft.isVisible())
			craft.move();
	}
	
	/*
	 * if there is no aliens left, the game stops and the player wins
	 * else, aliens are randomly generated by the same random function
	 * in order to not invade the screen by aliens, they have a little chance to spawn (spawn > 990) 
	 * and there can be 10 aliens at the same time in maximum
	 */
	private void updateAliens(){
		
		//if(aliens.isEmpty()){
		if(spawned >= 100){
			ingame = false;
			return;
		}
		
		for(int i = 0; i < aliens.size(); i++){
			
			Alien a = aliens.get(i);
			if(a.isVisible())
				a.move();
			else{
				aliens.remove(i);
				spawned++;
				}
		}
		
		Random rand = new Random();
		int spawn = rand.nextInt(1000);
		int alienX =0;
		//int alienY =0;
		
		
		
		if(spawn > 980 && aliens.size() < 10){
			int posY = rand.nextInt(B_HEIGHT);
			int posX = rand.nextInt(B_WIDTH) + 400;
			
			//if(posY > 300) posY -= 100 ;
			
			if(posY < 76) posY = 20;
			else if(posY < 132) posY = 81;
			else if(posY < 188) posY = 142;
			else if(posY < 244) posY = 203;
			else posY = 264;
			
			if(!aliens.isEmpty()){
				Alien a = aliens.get(0);
			if(Math.abs(posX-alienX) > a.width){
				aliens.add(new Alien(posX, posY));
				alienX = posX;
				//alienY = posY;
				}
			}
			else
				aliens.add(new Alien(posX, posY));

		}
	}
	
	public void updateWalls(){
		
		int wallX = 0;
		//int wallY = 0;
		
		Random rand = new Random();
		int spawn = rand.nextInt(1000);
		
		if(spawn > 990 && walls.size()<=2){
			int posY = rand.nextInt(B_HEIGHT);
			int posX = rand.nextInt(B_WIDTH) + 400;
			
			if(posY > 300) posY -= 100 ;
		
			
			
			if(posY < 76) posY = 20;
			else if(posY < 132) posY = 81;
			else if(posY < 188) posY = 142;
			else if(posY < 244) posY = 203;
			else posY = 264;
			
			if((Math.abs(posX-wallX))> 300){
				walls.add(new Wall(posX, posY));
				wallX = posX;
				//wallY = posY; 
			}
			
		}
		
		for (int i = 0; i <walls.size(); i++){
			Wall w = walls.get(i);
			if (w.isVisible())
				w.move();
			else 
				walls.remove(i);
		}
		
	}
	
	public void updateLives(){
		
		Random rand = new Random();
		int spawn = rand.nextInt(1000);
		
		if(spawn > 990 && lives.size()==0 && aliens2.size()==0){
			int posY = rand.nextInt(B_HEIGHT);
			int posX = rand.nextInt(B_WIDTH) + 400;
			
			//if(posY > 300) posY -= 100 ;
			
			if(posY < 76) posY = 20;
			else if(posY < 132) posY = 81;
			else if(posY < 188) posY = 142;
			else if(posY < 244) posY = 203;
			else posY = 264;
		
			lives.add(new Life(posX, posY));}
		
		for (int i = 0; i <lives.size(); i++){
			Life l = lives.get(i);
			if (l.isVisible())
				l.move();
			else 
				lives.remove(i);
		}
		
	}
	
	public void updateAliens2(){
		
		Random rand = new Random();
		int spawn = rand.nextInt(1000);
		
		if(spawn > 990 && aliens2.size()==0 && lives.size()==0){
			int posY = rand.nextInt(B_HEIGHT);
			int posX = rand.nextInt(B_WIDTH) + 400;
			
			//if(posY > 300) posY -= 100 ;
			
			if(posY < 76) posY = 20;
			else if(posY < 132) posY = 81;
			else if(posY < 188) posY = 142;
			else if(posY < 244) posY = 203;
			else posY = 264;
		
			aliens2.add(new Alien2(posX, posY));}
		
		for (int i = 0; i <aliens2.size(); i++){
			Alien2 a = aliens2.get(i);
			if (a.isVisible())
				a.move();
			else
				aliens2.remove(i);
		}
		
	}
	
	public void updateSpeed(){
		
		if(spawned%20==0 && spawned != 0){
			back.setSpeed((back.getSpeed()+1)); ;
			Alien.setSpeed((Alien.getSpeed()+1));
			Life.setSpeed((Life.getSpeed()+1));
			spawned++; //triche, à modifier
			}
		
	}
	
	/*
	 * the collisions are verified by simple rectangles
	 * the detection is then not really good because the picture of the player is not a rectangle
	 */
	@SuppressWarnings("unchecked")
	public void checkCollisions(){
		
		if(life < 0){
			Sound.play("explosion2.wav");
		}
		

        Rectangle rC = craft.getBounds();

        for (Alien alien : aliens){
            Rectangle rA = alien.getBounds();

            if (rC.intersects(rA)) {
            	alien.setVisible(false);
                life--;
                Sound.play("explosion.wav");
            }
        }
        
        for(Alien2 alien : aliens2){
        	Rectangle rA2 = alien.getBounds();
        	if(rC.intersects(rA2)){
        		alien.setVisible(false);
        		Sound.play("explosion.wav");
        		life -= 2;
        	}
        	
        	
        }
        
        for(Wall wall : walls){
        	Rectangle rW = wall.getBounds();
        	if(rC.intersects(rW)){
        		craft.setVisible(false);
        		Sound.play("explosion2.wav");
        		ingame = false;
        	}
        }
        
        for(Life l : lives){
        	Rectangle rL = l.getBounds();
        	if(rC.intersects(rL)){
        		life++;
        		l.setVisible(false);
        		Sound.play("heal.wav");
        	}
        }

        ArrayList<Missile> ms = craft.getMissiles();

        for (Missile m : ms) {

            Rectangle rM = m.getBounds();

            for (Alien alien : aliens) {

                Rectangle rA = alien.getBounds();

                if (rM.intersects(rA)) {
                    m.setVisible(false);
                    alien.setVisible(false);
                    score++;
                    Sound.play("explosion.wav");
                }
            }
            
            for(Alien2 alien : aliens2){
            	Rectangle rA2 = alien.getBounds();
            	if(rM.intersects(rA2)){
            		m.setVisible(false);
            		alien.count--; 
            		if(alien.count == 0){
            			alien.setVisible(false);
            			score++;
            			Sound.play("explosion.wav");
            		}
            	}
            }
        }
    }
	
	private class TAdapter extends KeyAdapter{
		
		@Override
		public void keyReleased(KeyEvent e){
			
			craft.keyReleased(e);
			
		}
		
		@Override
		public void keyPressed(KeyEvent e){
			
			craft.keyPressed(e);

		}
		
		
	}
}
